//RENSA DATABAS
match ()-[r]-() delete r;
match (n) delete n;
MATCH(o) DETACH DELETE o;

:param basedir => 'https://raw.githubusercontent.com/tullanders/gtfs_neo4j/main/data/';

// agency
CREATE CONSTRAINT uc_agency_agency_id IF NOT EXISTS FOR (n:agency) REQUIRE (n.agency_id) IS UNIQUE;
CREATE INDEX index_agency_agency_id IF NOT EXISTS FOR (n:agency) ON (n.agency_id);

LOAD CSV WITH HEADERS FROM $basedir + "agency.csv" as row
MERGE (n:agency {agency_id:tointeger(row.agency_id)})
SET n.agency_name = row.agency_name, 
n.agency_url = row.agency_url,
n.agency_timezone = row.agency_timezone,
n.agency_lang = row.agency_lang,
n.agency_fare_url = row.agency_fare_url;

// routes
CREATE CONSTRAINT uc_routes_route_id IF NOT EXISTS FOR (n:routes) REQUIRE (n.route_id) IS UNIQUE;
CREATE INDEX index_routes_route_id IF NOT EXISTS FOR (n:routes) ON (n.route_id);
CREATE INDEX index_routes_agency_id IF NOT EXISTS FOR (n:routes) ON (n.agency_id);
LOAD CSV WITH HEADERS FROM $basedir + "routes.csv" as row
MERGE (n:routes {route_id:tointeger(row.route_id)})
SET n.agency_id = tointeger(row.agency_id), 
n.route_short_name = row.route_short_name,
n.route_long_name = row.route_long_name,
n.route_type = row.route_type,
n.route_desc = row.route_desc;

// trips
CREATE CONSTRAINT uc_trips_trip_id IF NOT EXISTS FOR (n:trips) REQUIRE (n.trip_id) IS UNIQUE;
CREATE INDEX index_trips_trip_id IF NOT EXISTS FOR (n:trips) ON (n.trip_id);
CREATE INDEX index_trips_route_id IF NOT EXISTS FOR (n:trips) ON (n.route_id);
CREATE INDEX index_trips_service_id IF NOT EXISTS FOR (n:trips) ON (n.service_id);
CREATE INDEX index_trips_shape_id IF NOT EXISTS FOR (n:trips) ON (n.service_id);
LOAD CSV WITH HEADERS FROM $basedir + "trips.csv" as row
MERGE (n:trips {trip_id:tointeger(row.trip_id)})
SET n.route_id = tointeger(row.route_id), 
n.service_id = tointeger(row.service_id),
n.trip_headsign = row.trip_headsign,
n.direction_id = tointeger(row.direction_id),
n.route_type = tointeger(row.route_type),
n.shape_id = tointeger(row.shape_id),
n.route_desc = row.route_desc;

// calendar_dates
CREATE INDEX index_calendar_dates_service_id IF NOT EXISTS FOR (n:calendar_dates) ON (n.service_id);
CREATE INDEX index_calendar_dates_date IF NOT EXISTS FOR (n:calendar_dates) ON (n.date);
LOAD CSV WITH HEADERS FROM $basedir + "calendar_dates.csv" as row
MERGE (n:calendar_dates {service_id:tointeger(row.service_id), `date`: date(row.date)})
SET n.exception_type = row.exception_type;

// stop_times
CREATE INDEX index_stop_times_trip_id IF NOT EXISTS FOR (n:stop_times) ON (n.trip_id);
CREATE INDEX index_stop_times_stop_id IF NOT EXISTS FOR (n:stop_times) ON (n.stop_id);
LOAD CSV WITH HEADERS FROM $basedir + "stop_times.csv" as row
MERGE (n:stop_times {trip_id:tointeger(row.trip_id), stop_id:tointeger(row.stop_id)})
SET n.arrival_time = row.arrival_time,
n.departure_time = row.departure_time,
n.stop_sequence = tointeger(row.stop_sequence),
n.stop_headsign = row.stop_headsign,
n.pickup_type = tointeger(row.pickup_type),
n.drop_off_type = tointeger(row.drop_off_type),
n.shape_dist_traveled = row.shape_dist_traveled,
n.timepoint = tointeger(row.timepoint);

// stops
CREATE CONSTRAINT uc_stops_stop_id IF NOT EXISTS FOR (n:stops) REQUIRE (n.stop_id) IS UNIQUE;
CREATE INDEX index_stops_stop_id IF NOT EXISTS FOR (n:stops) ON (n.stop_id);
LOAD CSV WITH HEADERS FROM $basedir + "stops.csv" as row
MERGE (n:stops {stop_id:tointeger(row.stop_id)})
SET n.stop_name = row.stop_name, 
n.stop_lat = tofloat(row.stop_lat),
n.stop_lon = tofloat(row.stop_lon),
n.location_type = tointeger(row.location_type),
n.parent_station = row.parent_station,
n.platform_code = row.platform_code;

// shapes
CREATE CONSTRAINT uc_shapes_shape_id IF NOT EXISTS FOR (n:shapes) REQUIRE (n.shape_id) IS UNIQUE;
CREATE INDEX index_shapes_shape_id IF NOT EXISTS FOR (n:shapes) ON (n.shape_id);
LOAD CSV WITH HEADERS FROM $basedir + "shapes.csv" as row
MERGE (n:shapes {shape_id:tointeger(row.shape_id)})
SET n.shape_pt_lat = tofloat(row.shape_pt_lat),
n.shape_pt_lon = tofloat(row.shape_pt_lon),
n.shape_pt_sequence = tointeger(row.shape_pt_sequence),
n.shape_dist_traveled = tointeger(row.shape_dist_traveled);

// RELATIONS:
// agency -> routes
match (a:agency)
match (r:routes {agency_id: tointeger(a.agency_id)})
merge (a)-[:HAS_ROUTES]->(r);

// routes -> trips
match (r:routes)
match (t:trips {route_id: r.route_id})
merge (r)-[:HAS_TRIPS]->(t);

// trips -> calendar_dates
match (t:trips)
match (c:calendar_dates {service_id: t.service_id})
merge (t)-[:HAS_CALENDAR_DATES]->(c);

// trips -> stop_times
match (t:trips)
match (s:stop_times {trip_id: t.trip_id})
merge (t)-[:HAS_STOP_TIMES]->(s);

// stop_times -> stops
match (st:stop_times)
match (s:stops {stop_id: st.stop_id})
merge (st)-[:HAS_STOPS]->(s);

// trips -> shapes
match (t:trips)
match (s:shapes {shape_id: t.shape_id})
merge (t)-[:HAS_SHAPES]->(s);

// transfers stop_times -> stop_times
LOAD CSV WITH HEADERS FROM $basedir + "transfers.csv" as row
match (st1:stop_times {stop_id:tointeger(row.from_stop_id), trip_id: tointeger(row.from_trip_id)})
match (st2:stop_times {stop_id:tointeger(row.to_stop_id), trip_id: tointeger(row.to_trip_id)})
with st1, st2
merge (st1)-[:TRANSFERS]->(st2);

// next stop between stop_times (not gtfs standard)
match (st1:stop_times)
match (st2:stop_times {trip_id: st1.trip_id, stop_sequence:st1.stop_sequence + 1})
merge (st1)-[:NEXT_STOP]->(st2);
